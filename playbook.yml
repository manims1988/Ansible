---
- name: Complete Ansible Demo
  become: yes
  gather_facts: true
  hosts: master
  vars_files: 
  vars_prompt:
   - name: myvar
   - name: environment_api
     prompt: "which env ? prod/stage/dev"
     default: testing
  environment:
   PATHLIB: "/var/lib/"
  vars:
   - nginx_port: 8888
   - authentication: 'ssh file'
   - var2: 'ansible complete demo task'
   - username: sammy
   - home: /home/sammy
   - greeting: Hello world!
   - continents:
      - Africa
      - Asia
      - South America
      - North America
      - Europe
      - Austrila
   - country: ['India','USA','China','Japan']
   - service: [sendmail,httpd,chrony,bind,sshd]
   - package: [bc,net-tools,httpd,tree,nginx,curl]
   - pathis: /tmp/rebootfile
   - sudoers: [vagrant,linuxuser,consul,terraform,argo]
   - files:
      - { dir: "folder1", file: "fileA"}
      - { dir: "folder2", file: "fileB"}
      - { dir: "folder3", file: "fileC"}
      - { dir: "folder4", file: "fileD"}
   - folder: [folder1,folder2,folder3,folder4]
   - sshuser: [keyuser,mainuser,linuxuser,pythonuser,rubyuser]
   - myfiles:
      - { source: "play1", destination: "/tmp/{{ ansible_hostname }}_mani1.txt", permission: "0755" }
      - { source: "play2", destination: "/home/vagrant/{{ ansible_hostname }}_mani2.txt", permission: "0644" }
   - nameage:
      - { name: "xavier", age: "40" }
      - { name: "paul", age: "22" }
      - { name: "pierre", age: "25" }
   - ourmap:
      hello: world     
      players:
       cricket: 'scahin' 
       basketball: 'coronoll'
       hockey: 'ravinder'
   - loopvars:
      - state: 28
      - color: 120
      - bird: 'peakcock'
      - animal: 'tiger'
   - loopvars1:
      - day: "night"
        good: 'bad' 
      - day: "morning"
        good: 'fine'
   - ourlist:
      - a: 1
        b: 2
      - c: 3
      - d: 4
   - newmap:
      a : 
         - 1
         - 2
      b : [3]
      c :
         - 4
   - varmap:
      a: [1,2]
      b: [3]
      c: [4]
   - runtask: true 
   - saygoodbye: false 
   - a: 1 
   - b: [2,3]
   - employee: 
      name: 'mike'
      age: 34
      gender: 'male'
      work: 'goverment employee'
    
  tags:
   - firstplay

  tasks:
   - name: find the files
     find:
      paths: /root/
      patterns: '*.yml'
     register: filename
     tags:
      - findfile

   - name: check the content
     debug: 
      msg: "{{ filename }}"
     tags:
      - findfile

   - name: check the content with path
     debug: 
      msg: "{{ item.path }}"
     with_items: "{{ filename.files }}"
     tags:
      - findfile

   - name: create file based on when condition
     block: 
      - name: create sample file
        file:
         path: /root/saveenvfile1
         state: touch

      - name: check sample file created
        stat:
         path: /root/saveenvfile1
        register: saveenvfile

      - name: checking wait for file
        wait_for:
         path: "{{ saveenvfile.stat.path }}"
         search_regex: "end"
         delay: 10
         sleep: 5
         timeout: 300
        when: saveenvfile.stat.exists

      - name: pause to get some sensitive input
        pause:
         prompt: 'press enter' 
         echo: yes 
         seconds: 5
  
      - name: check the file status 
        debug: 
         msg: "{{ saveenvfile }}"
        when: saveenvfile.stat.exists == true

      - name: copy the files
        copy:
         src: /root/Dockerfile
         dest: /tmp/
         mode: 0777
        when: saveenvfile.stat.exists

      - name: synchronize the files from app1 to app2
        synchronize:
         src: /root/app1.txt 
         dest: /root/app1.txt
         mode: pull
        delegate_to: app2
        register: syncfile
        # when: saveenvfile.stat.exists

      - name: check status
        debug:
         msg: '{{ syncfile.changed }}'

     tags:
      - filewhen

   - name: copy cat the file using single variable ansible-playbook playbook.yml -e filename=Dockerfile -t copycat1 
     copy:
      src: /root/{{ filename }}
      dest: /tmp/
     tags:
      - copycat1

   - name: copy cat the file using double variable ansible-playbook playbook.yml -e filename=vars.yaml -e path=/root/ -t copycat2
     copy:
      src: "{{ path }}{{ filename }}"
      dest: /tmp/
     tags:
      - copycat2

   - name: looping dictionary
     debug:
      msg: 'hello, {{ item }}'
     loop: '{{ employee|dict2items }}'
     tags:
      - loop5

   - name: looping dictionary
     debug:
      msg: 'hello, {{ item.value }}'
     loop: '{{ employee|dict2items }}'
     tags:
      - loop7

   - name: looping dictionary
     debug:
      msg: 'hello, {{ item.key }} == {{ item.value }}'
     loop: '{{ employee|dict2items }}'
     tags:
      - loop6

   - name: looping dictionary
     debug:
      msg: 'hello, {{ item.key }} == {{ item.value }}'
     loop: '{{ employee|dict2items }}'
     when: folder[1] == 'folder2'
     tags:
      - loopcon

   - name: check when condition using AND
     debug: 
      msg: 'Success with and operation, {{ b[0] }}'
     when: saygoodbye == false and nginx_port == 8888
     tags:
      - and

   - name: check when condition using AND
     debug: 
      msg: 'Failure with and operation, {{ b[0] }}'
     when: saygoodbye == false and country[0] == 'Solavia'
     tags:
      - and

   - name: check when condition using AND 3 arg
     debug: 
      msg: 'success with 3 arguments and operation'
     when: saygoodbye == false and nameage[0].age == '40' and newmap.a[0] == 1
     tags:
      - and

   - name: check when condition using OR 3 arg
     debug: 
      msg: 'success with 3 arguments in OR operation'
     when: runtask == true or nameage[0].age == '40' # or myfiles[1].source == "play1"
     tags:
      - or

   - name: check when condition using OR 3 arg
     debug: 
      msg: 'success with 3 arguments in OR operation'
     when: runtask == true or nameage[0].age == '40' # or myfiles[1].source == "play1"
     tags:
      - or

   - name: check when condition using OR and AND with 3 arg
     debug: 
      msg: 'success with 3 arguments in OR operation'
     when: (runtask == true and files[1].file == 'fileB') or (nameage[0].age == '40') # or myfiles[1].source == "play1")
     tags:
      - andor

   - name: check looping type-1
     debug: 
      msg: 'hello, {{ item }}'
     loop: '{{ continents }}'
     tags:
      - loop1

   - name: check looping type-2
     debug: 
      msg: 'hello, {{ item }}'
     loop: '{{ nameage }}'
     tags:
      - loop2

   - name: check looping type-3
     debug: 
      msg: 'hello, {{ item }}'
     loop: '{{ loopvars }}'
     tags:
      - loop3

   - name: check looping type-4
     debug: 
      msg: 'hello, {{ item.day }}'
     loop: "{{ loopvars1 }}"
     tags:
      - loop4

   - name: check when condition using AND 3 arg
     debug: 
      msg: '{{ myfiles.[1].source }}'
    #  when: 
     tags:
      - check
      
   - name: check when condition
     debug: 
      msg: 'hello, {{ b[0] }}'
     when: saygoodbye == false
     tags:
      - vars

   - name: check when condition
     debug: 
      msg: 'hello, {{ newmap.a[0] }}'
     when: runtask == true
     tags:
      - vars

   - name: check when condition
     debug: 
      msg: 'check not equal to, {{ newmap.a[0] }}'
     when: runtask != true
     tags:
      - vars

   - name: check when condition
     debug: 
      msg: 'check not equal to with not placed near to when, {{ newmap.a[0] }}'
     when: not saygoodbye
     tags:
      - vars

   - name: display the vars 
     debug: 
      msg: 'hello, {{ newmap.a[0] }}'
     tags:
      - vars

   - name: print the vars 
     debug: 
      msg: 'hello, {{ ourlist[0].b }}'
     tags:
      - vars

   - name: print the vars 
     debug: 
      msg: 'hello, {{ ourmap.hello }}'
     tags:
      - vars

   - name: show the vars
     debug:
      msg: 'hello {{ ourmap.players.hockey }}'
     tags:
      - vars

   - name: download node exporter 
     get_url:
      url: https://github.com/prometheus/node_exporter/releases/download/v1.0.1/node_exporter-1.0.1.linux-amd64.tar.gz
      dest: /home/vagrant/
     tags:
      - geturl

   - name: Test Archive
     unarchive:
      src: /home/vagrant/node_exporter-1.0.1.linux-amd64.tar.gz
      dest: /tmp
     tags:
      - unarchive

   - name: install bind 
     yum:
      name: bind
      state: latest
     notify: bind start
     tags:
      - bind

   - name: Install rsync package on block shell
     block:
      - name: rsync instll 
        yum:
         name: rsync
         state: present
        tags:
         - sync

      - name: sync the file 
        synchronize:
         src: mani.txt
         dest: /home/vagrant/mani.txt
        tags:
         - sync

      - name: create files and folder
        shell: |
         mkdir -p files;for i in $(seq 1000);do touch files/$i;done
        delegate_to: localhost
        tags:
         - sync  

      - name: sync
        synchronize:
         src: /root/files/
         dest: /tmp/files
        tags:
         - sync
     tags:
      - block

   - name: demo on assemble
     shell: |
      touch /tmp/assemb1 /tmp/assemb2 /tmp/assemb3
     tags:
      - assemble 

   - name: write some text on files
     shell: | 
      echo "this is assemb1" > /tmp/assemb1
      echo "this is assemb2" > /tmp/assemb2
      echo "this is assemb3" > /tmp/assemb3
     tags:
      - assemble 

   - name: copy those files 
     copy:
      src: "/tmp/{{ item }}"
      dest: /tmp/assemble/
     with_items:
      - assemb1
      - assemb2
      - assemb3
     tags:
      - assemble

   - name: test assemable
     assemble:
      delimiter: "---"
      src: /tmp/assemble
      dest: /tmp/myconf.cfg
     tags:
      - assemble

   - name: echo the variable
     shell: echo $PATHLIB
     register: __output
     tags:
      - env

   - name: print
     debug:
      var: __output
     tags:
      - env
# run ==> export ENV=Prod
   - name: echo the variable with lookup
     shell: echo {{ lookup ('env', 'ENV') }}
     register: __output
     tags:
      - env

   - name: print
     debug:
      var: __output.stdout_lines
     tags:
      - env
# run ==> unset ENV
   - name: echo the variable with lookup
     shell: echo {{ lookup ('env', 'ENV') | default('stage', True) }}
     register: __output
     tags:
      - env

   - name: print
     debug:
      var: __output.stdout_lines
     tags:
      - env

   - name: echo the variable with lookup varsprompt 
     shell: echo {{ myvar }}
     register: __output
     tags:
      - env

   - name: print
     debug:
      var: __output.stdout_lines
     tags:
      - env

   - name: echo the variable using varsprompt 
     shell: echo {{ environment_api }}
     register: __output
     tags:
      - env

   - name: print
     debug:
      var: __output.stdout_lines
     tags:
      - env

   - name: running the complete block
     block:
      - name: download the fish repo
        yum_repository: 
         name: fishrepo
         description: fishrepo
         baseurl: https://download.opensuse.org/repositories/shells:fish:release:2/CentOS_7/shells:fish:release:2.repo
         
      - name: fish repo file
        shell: |
         cd /etc/yum.repos.d/
         wget https://download.opensuse.org/repositories/shells:fish:release:2/CentOS_7/shells:fish:release:2.repo

      - name: install fish
        yum:
         name: fish
         state: present
    #  when: ansible_os_family == "RedHat"

     tags:
      - fish

   - name: capture output of id command
     command: id -un
     register: output
     tags:
      - variable

   - name: print the captured variable
     debug: 
      var=output.stdout_lines
     tags:
      - variable

  #  - name: Include vars file
  #    include_vars: vars.yaml
  #    tags:
  #     - enablessh

   - name: Ensure ssh {{ authentication }} value has changed
     ansible.builtin.lineinfile:
      path: /etc/ssh/sshd_config
      regexp: '^PasswordAuthentication'
      line: PasswordAuthentication yes
     tags:
      - enablessh

   - name: print variables
     debug:
       msg: "Username: {{ greeting }} {{ username }}, Home dir: {{ continents [0] }}{{ home }}"
     tags:
      - variables 

   - name: print country name
     debug:
       msg: "{{ item }}"
     with_items:
       - "{{ country }}"
     tags:
      - variables 

   - name: print special variables
     debug:
       msg: "special varaibles {{ ansible_system_vendor }} {{ ansible_ssh_host_key_rsa_public }}"
     tags:
      - variables

   - name: install {{ service [2] }}
     yum:
      name: "{{ service [2] }}"
      state: present
     ignore_errors: true
     tags:
      - service

   - name: start {{ service [2] }} service
     systemd:
      name: "{{ service [2] }}"
      state: started
      enabled: yes
     ignore_errors: true
     tags:
      - service

   - name: reload {{ service [2] }} service
     systemd:
      name: "{{ service [2] }}"
      state: reloaded
     ignore_errors: true
     tags:
      - service

   - name: restart {{ service [2] }} service
     systemd:
      name: "{{ service [2] }}"
      state: restarted
     ignore_errors: true
     tags:
      - service

   - name: daemon reload {{ service [2] }}
     systemd:
      daemon-reload: yes
     tags:
      - service
     ignore_errors: true

   - name: stop {{ service [2] }}
     systemd:
      name: "{{ service [2] }}"
      state: stopped
     ignore_errors: true
     tags:
      - stopservice

   - name: create a simple directory
     file:
      path: /tmp/folder/
      state: directory
      owner: root

   - name: create a simple directory
     file:
      path: /tmp/folder/
      state: directory
      owner: root
      group: root
      mode: 0755
     become: yes
     tags:
      - createdirectory

   - name: create a path
     file:
      path: /tmp/folder/1/2/3/4
      recurse: yes
      state: directory
      owner: root
      group: root
      mode: 0755
     tags:
      - mnydir

   - name: touch a file
     file:
      path: /tmp/folder/1/2/3/4/fichier.txt
      state: touch
      owner: root
      group: root
      mode: 0755
     tags:
      - crefile

   - name: create a symlink
     file:
      src: /tmp/folder/1/2/3/4/
      dest: /tmp/symlink
      state: link  #hard
      owner: root
      group: root
      mode: 0755
     tags:
      - crelink

   - name: remove a file
     file:
      path: /tmp/folder/1/2/3/4/fichier.txt
      state: absent
     tags:
      - delfile

   - name: remove path
     file:
      path: /tmp/xavki/
      state: absent
     tags:
      - delpath

   - name: Create group
     group:
      name: "{{ sshuser [2] }}"
      state: present
     tags:
      - groups

   - name: Create group
     group:
      name: sudo
      state: present
     tags:
      - groups

   - name: create {{ sshuser [2] }} user
     user:
      name: "{{ sshuser [2] }}"
      state: present
      password: "{{ 'password' | password_hash('sha512') }}"
     tags:
      - usercreate
      - sshkey

   - name: create demo user
     user:
      name: linuxuser
      state: present
      groups: sudo
      append: yes
      password: "{{ 'password' | password_hash('sha512') }}"
     tags:
      - addinsudo
  
   - name: create a file
     file:
      path: "{{ pathis }}"
      state: touch
      owner: root
     tags:
      - createfile
      - createdirectory
      - reboot

   - name: check the file exists
     stat:
      path: "{{ pathis }}"
     register: __file_exist
     tags:
      - fileoutput
      - createdirectory
      - reboot
      - createfile

   - name: debug the file content
     debug:
      var: __file_exist
     tags:
      - fileoutput
      - createdirectory
      - createfile

   - name: debug the file content
     debug:
      var: __file_exist.stat.exists
     tags:
      - fileoutput
      - checkfileexists
      - createdirectory
      - createfile

   - name: create a dirrectory if the file exist
     file:
      path: /tmp/mydir
      state: directory
     when: __file_exist.stat.exists
     tags:
      - createdirectory

   - name: create some directories in a xavki dir
     file:
      path: /tmp/mani/{{ item }}
      state: directory
      recurse: yes
     with_items:
      - mani1
      - mani2
      - mani3
      - mani4
     tags:
      - withloops

   - name: create some directories in a varfolder dir
     file:
      path: /tmp/varfolder/{{ item }}
      state: directory
      recurse: yes
     with_items:
      - "{{ folder }}"   
      - "{{ service }}"
     tags:
      - withvarloops

   - name: create dirs and files into it
     file:
      path: /tmp/mani/{{ item.dir }}/{{ item.file }}
      state: touch
     with_items:
      - { dir: "mani1", file: "fileA"}
      - { dir: "mani2", file: "fileB"}
      - { dir: "mani3", file: "fileC"}
      - { dir: "mani4", file: "fileD"}
     tags:
      - withdictionary

   - name: create dirs and files using vars
     file:
      path: /tmp/varfolder/{{ item.dir }}/{{ item.file }}
      state: touch
     with_items:
      - "{{ files }}"
     tags:
      - withdirvar

   - name: create dirs and files into it
     file:
      path: /tmp/{{ item | basename }}
      state: touch
     with_fileglob:
      - play*
     tags:
      - fileglobal

   - name: create files
     file:
      path: /tmp/{{ item }}
      state: touch
     with_inventory_hostnames:
      - master
      - docker
     tags:
      - filewithhostname

   - name: set the reboot module
     reboot:
      msg: "The message before the reboot..."
      connect_timeout: 5
      reboot_timeout: 300
      pre_reboot_delay: 0
      post_reboot_delay: 30
      test_command: uptime
     when: __file_exist.stat.exists
     tags:
      - reboot

   - name: reboot validation
     file:
      path: /tmp/afterreboot.txt
      state: touch
     tags:
      - reboot 

   - name: generate SSH key
     openssh_keypair:
      path: /tmp/ssh_key
      type: rsa
      size: 4096
      state: present
      force: no
      owner: vagrant
      group: vagrant
     tags:
      - sshkey

   - name: Add {{ sshuser [2] }} user to the sudoers
     copy:
      dest: "/etc/sudoers.d/{{ sshuser [2] }}"
      content: "{{ sshuser [2] }}  ALL=(ALL)  NOPASSWD: ALL"
     become: yes
     tags: 
      - sshkey

   - name: Deploy SSH Key
     authorized_key: 
      user: "{{ sshuser [2] }}"
      key: "{{ lookup('file', '/tmp/ssh_key.pub') }}"
      state: present
     become: yes
     ignore_errors: true
     tags:
      - sshkey

   - name: touch a file to test delegate 
     file:
      path: /tmp/i_delegate.txt
      state: touch
      owner: root
      group: root
      mode: 0755
     tags:
      - delegate

   - name: create a delegate file on localhost with delegation
     file:
      state: touch
      path: /tmp/i_delegate_to_local.txt
     delegate_to: localhost
     tags:
      - delegate

   - name: create a hostname file on localhost with delegation
     file:
      state: touch
      path: "/tmp/{{ inventory_hostname }}.txt"
     run_once: yes
     delegate_to: localhost
     tags:
      - delegate

  #  - name: debug from all vm
  #    debug:
  #     var: var1
  #     tags:
  #      - delegate

   - name: debug from delegate 
     debug:
      var: var1
     delegate_to: localhost
     tags:
      - delegate

   - name: a simple file copy
     copy:
      src: play1
      dest: /tmp/play1.txt
      backup: yes 
      # remote_src: yes
     tags:
      - copy

   - name: a simple directory copy
     copy:
      src: /tmp/mani
      dest: /home/vagrant/
      backup: yes
     tags:
      - copy

   - name: copy using variables
     copy:
      src: "{{ item.source }}"
      dest: "{{ item.destination }}"
      mode: "{{ item.permission }}"
      backup: yes
     with_items: "{{ myfiles }}"
     tags:
      - copy

   - name: copy files with backup
     copy:
      src: "{{ item }}"
      dest: /tmp/
      backup: yes
     with_fileglob:
      - /root/docker/Dockerfile
      - /root/docker/*.txt
      - /root/docker/*.html
     tags:
      - copy 

   - name: copy the file content
     copy:
      content: |
         Hi,
         DevOps team !!
         we are on {{ ansible_hostname }}
      dest: /tmp/content.txt
      backup: yes
     tags:
      - copy

   - name: Add devops user to the sudoers
     copy:
      dest: "/etc/sudoers.d/devops"
      content: "devops ALL=(ALL)  NOPASSWORD: ALL"
      owner: root
      group: root
      mode: 0400
      validate: /usr/sbin/visudo -cf /etc/sudoers.d/vagrant
     become: yes
     ignore_errors: true
     tags: 
      - copy

   - name: copie du fichier nginx.conf avec check
     copy:
      src: httpd.conf
      dest: /etc/httpd/conf/httpd.conf
      owner: root
      group: root
      mode: 0644
      validate: /usr/sbin/httpd -t
      backup: yes
     ignore_errors: true
     tags:
      - copy

   - name: fetch /etc/hosts file 
     fetch:
      src: /etc/hosts
      dest: /home/vagrant/collect_one
     tags:
      - fetchfile

   - name: fetch /etc/hosts file with hostname
     fetch:
      src: /etc/hosts
      dest: /home/vagrant/collect_two/hosts_{{ ansible_hostname }}
     tags:
      - fetchfile

   - name: fetch /etc/hosts file only not directory
     fetch:
      src: /etc/hosts
      dest: /home/vagrant/hosts_{{ ansible_hostname }}.txt
      flat: yes
     tags:
      - fetchfile

   - name: install {{ package [4] }} package
     yum:
      name: "{{ package [4] }}"
      state: present
     tags:
      - fetchfile

   - name: start {{ package [4] }} service
     systemd:
      name: "{{ package [4] }}"
      state: started
     tags:
      - fetchfile

   - name: clean the /var/www/html/ directory
     file:
      path: "{{ item }}"
      state: absent
     with_fileglob:
      - /var/www/html/*.html
     tags:
      - fetchfile
    
   - name: fetch files with flat options
     fetch:
      src: /etc/hosts
      dest: /var/www/html/hosts_{{ ansible_hostname }}.txt
      flat: yes
     tags:
      - fetchfile

   - name: create new template
     template:
      src: montemplate.txt.j2
      dest: /tmp/hello.txt
      owner: vagrant
      group: vagrant
      mode: 0755
      backup: yes
     tags:
      - template

   - name: template with loops
     template:
      src: montemplate.txt.j2
      dest: "/tmp/hello_{{ item.name }}.txt"
     with_items:
      - "{{ nameage }}"
     tags:
      - template

   - name: install {{ package [4] }}
     yum:
      name: "{{ package [4] }}"
      state: present
      update_cache: yes
     notify: reload_nginx
     tags:
      - nginx

   - name: install {{ package [5] }}
     yum:
      name: "{{ package [5] }}"
      state: present
      update_cache: yes
     tags:
      - curl
  
   - name: start nginx
     systemd:
       name: nginx
       state: started
     tags:
      - nginx 
    
   - name: lineinfile
     lineinfile: 
      dest: /tmp/test.conf 
      line: "test line"
      state: present
      create: True
     tags:
      - lineinfine

   - name: lineinfile
     lineinfile:
      dest: /tmp/test.conf
      line: "test 2"
      regexp: "^test$"
      state: present
      create: True
     tags:
      - lineinfile
    
   - name: lineinfile
     lineinfile:
      dest: /tmp/test.conf
      line: 'line replaced with 1st column : \1'
      regexp: "^test ([0-2])$"
      backrefs: yes
      state: present
      create: True
     tags:
      - lineinfile

   - name: lineinfile
     lineinfile:
      dest: /tmp/test.conf
      line: '# \1'
      regexp: "(^line replaced with 1st column : [0-2])"
      backrefs: yes
      state: present
      create: True

   - name: line in file
     lineinfile:
      dest: /tmp/test.conf
      line: "line added belore"
      insertbefore: '# line replaced with 1st column : [0-2]'
      state: present
      create: True
     tags:
      - lineinfile

   - name: lineinfile
     lineinfile:
      dest: /tmp/test.conf
      regexp: "^Ma nouvelle ligne"
      #line: "^Ma nouvelle ligne"
      state: absent
     tags:
      - lineinfile


   - name: lineinfile
     lineinfile: 
      dest: /tmp/test.conf
      regexp: "^#"
      state: absent
      backup: yes
     tags:
      - lineinfile
    
   - name: get facts
     setup: 
     tags:
      - setup

   - name: debug of facts
     debug: 
      var: ansible_facts
     tags:
      - setup

   - name: setup with register
     setup: 
     register: out_facts
     tags:
      - setup

   - name: debug of facts show output
     debug: 
      var: out_facts
     tags:
      - setup

   - name: install tree
     yum: 
      name: tree
      state: present
     when: ansible_os_family == "RedHat" 
     tags:
      - setup

   - name: setup module for user
     setup: 
        filter: ansible_user*
     register: __out_facts
     tags:
      - setup


   - name: setup ouput
     debug: 
      var: __out_facts
     tags:
      - setup

   - name: debug facts
     debug: 
      var: ansible_facts
     tags:
      - setup

   - name: hostname
     debug: 
      var: ansible_hostname
     tags:
      - setup

   - name: command with 1st option
     command:
      cmd: ls
     register: __output
     tags:
      - command 

   - name: debug the 1st output
     debug:
      var: __output
     tags:
      - command
 
   - name: command with 2nd option
     command:
       cmd: ls
       chdir: /etc/
     register: __output
     tags:
      - command

   - name: debug the 2nd output
     debug:
      var: __output
     tags:
      - command
 
   - name: command with 3rd option
     command:
       argv:
       - ls
       - -larth
     register: __output
     tags:
      - command

   - name: debug the 3rd output
     debug:
      var: __output
     tags:
      - command
 
   - name: create a file to test command 
     file:
       path: /tmp/ansiblefile
       state: touch
     tags:
      - command

   - name: command with 4th option
     command: 
       cmd: ls -lath /tmp
       creates: /tmp/ansiblefile
     register: __output
     tags:
      - command

   - name: debug the 4th output
     debug:
       var: __output
     tags:
      - command
 
   - name: command with 5th option
     command: 
       cmd: ls -lath /tmp
       removes: /tmp/xavki
     tags:
      - command
 
   - name: shell with 1st option
     shell: cat /etc/hosts | grep 127
     register: __output
     tags:
      - shell

   - name: debug 1st output 
     debug:
       var: __output
     tags:
      - shell
 
   - name: shell with 2nd option
     shell: |
       cat /etc/hosts
       ls /etc/
     register: __output
     tags:
      - shell
 
   - name: debug 2nd output
     debug:
       var: __output
     tags:
      - shell

   - name: shell with 3rd option
     shell: echo "Hello $MAVAR"
     environment:
       MAVAR: "Ansible"
     register: __output
     tags:
      - shell
 
   - name: uri
     uri:
       url: http://xavki.blog
       method: GET
       validate_certs: False
     tags:
      - uri 
 
   - name: uri
     uri:
       url: http://xavki.blog
       method: GET
       validate_certs: False
       status_code: 200
     tags:
      - uri

   - name: uri
     uri:
       url: https://httpbin.org/status/500
       method: POST
       status_code: [200,201,301]
       validate_certs: False
     tags:
      - uri

   - name: uri
     uri:
       url: http://httpbin.org/get
       return_content: yes
       method: GET
     register: __content
     tags:
      - uri

   - name: debug
     debug:
       var: __content.content
     tags:
      - uri

   - name: uri
     uri:
       url: https://httpbin.org/get
       method: GET
       return_content: yes
       validate_certs: False
       body_format: json
     register: __body
     tags:
      - uri

   - name: debug
     debug:
       var: __body.json.url
     tags:
      - uri

   - name: uri
     uri:
       url: http://xavki.blog
       return_content: yes
       method: GET
       validate_certs: False
     register: __content
     failed_when: " 'xavki' not in __content.content"
     tags:
      - uri

   - name: uri
     uri:
       url: https://httpbin.org/basic-auth/toto/test
       user: "toto"
       password: "test"
       method: GET
       validate_certs: False
     tags:
      - uri

  handlers:
    - name: reload_nginx
      systemd:
       name: nginx
       state: reloaded
    
    - name: bind start
      systemd:
       name: named
       state: started 

- name: install node-exporter
  hosts: all
  become: yes
  roles: [node-exporter]
  tags: [secondplaybook]

- name: create users
  hosts: all
  become: yes
  roles: [users]
  tags: [users]

- name: Ansible AWS with vault demo
  become: yes
  hosts: localhost
  connection: local
  gather_facts: yes
  vars_files: vars.yaml
  tags: aws
  tasks:

   - name: ec2 vm creation
     ec2:
      aws_access_key: "{{ access_key }}"
      aws_secret_key: "{{ secret_key }}"
      instance_type: t2.micro
      image: ami-010aff33ed5991201
      wait: yes
      count: 1
      region: ap-south-1

- name: contiuation of first playbook
  gather_facts: true 
  become: true 
  hosts: localhost
  tags: findfile
  tasks:
   
   - set_fact:
      filename: "{{ hostvars[item]['filename'] }}" 
     with_items: "{{ groups['localhost'] }}"

   - name: print the file found
     debug:
      msg: "{{ item.path }}"
     with_items: "{{ filename.files }}"

   - name: check file name
     stat:
      path: /root/playbook.yml
     register: checkplaybookfile